<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="4.30.0@d0bc6e25d89f649e4f36a534f330f8bb4643dd69">
  <file src="src/DeclareStatement.php">
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$directive</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="1">
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType occurrences="1">
      <code>self</code>
    </MixedInferredReturnType>
    <MixedReturnStatement occurrences="1">
      <code>self::{$method}($value)</code>
    </MixedReturnStatement>
  </file>
  <file src="src/Generator/AbstractGenerator.php">
    <MixedAssignment occurrences="2">
      <code>$optionName</code>
      <code>$optionValue</code>
    </MixedAssignment>
    <MixedOperand occurrences="1">
      <code>$optionName</code>
    </MixedOperand>
    <RedundantCastGivenDocblockType occurrences="2">
      <code>(bool) $isSourceDirty</code>
      <code>(string) $indentation</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Generator/AbstractMemberGenerator.php">
    <RedundantCastGivenDocblockType occurrences="1">
      <code>(string) $name</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Generator/BodyGenerator.php">
    <RedundantCastGivenDocblockType occurrences="1">
      <code>(string) $content</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Generator/ClassGenerator.php">
    <ArgumentTypeCoercion occurrences="2">
      <code>$method</code>
      <code>$name</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod occurrences="1">
      <code>DocBlockGenerator::fromArray($value)</code>
    </DeprecatedMethod>
    <DocblockTypeContradiction occurrences="3">
      <code>! is_string($name)</code>
      <code>is_string($name)</code>
      <code>is_string($name)</code>
    </DocblockTypeContradiction>
    <InvalidNullableReturnType occurrences="1">
      <code>string</code>
    </InvalidNullableReturnType>
    <MixedArgument occurrences="12">
      <code>$array['name']</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>array_values($constant)</code>
      <code>array_values($method)</code>
      <code>array_values($property)</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="1">
      <code>$value</code>
    </MixedAssignment>
    <MixedOperand occurrences="2">
      <code>static::IMPLEMENTS_KEYWORD</code>
      <code>static::OBJECT_TYPE</code>
    </MixedOperand>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;traitUsageGenerator-&gt;getUseAlias($fqnClassName)</code>
    </NullableReturnStatement>
    <PossiblyFalseArgument occurrences="1">
      <code>strrpos($name, '\\')</code>
    </PossiblyFalseArgument>
    <PossiblyFalseOperand occurrences="1">
      <code>strrpos($name, '\\')</code>
    </PossiblyFalseOperand>
    <PossiblyNullOperand occurrences="1">
      <code>$namespaceAlias</code>
    </PossiblyNullOperand>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>is_array($constant)</code>
    </RedundantConditionGivenDocblockType>
    <UnsafeInstantiation occurrences="2">
      <code>new static($array['name'])</code>
      <code>new static($classReflection-&gt;getName())</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/DocBlock/Tag.php">
    <LessSpecificReturnStatement occurrences="1">
      <code>$tagManager-&gt;createTagFromReflection($reflectionTag)</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType occurrences="1">
      <code>Tag</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Generator/DocBlock/Tag/AuthorTag.php">
    <LessSpecificReturnStatement occurrences="1">
      <code>$tagManager-&gt;createTagFromReflection($reflectionTag)</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType occurrences="1">
      <code>AuthorTag</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Generator/DocBlock/Tag/GenericTag.php">
    <ImplementedReturnTypeMismatch occurrences="2">
      <code>$this</code>
      <code>string|null</code>
    </ImplementedReturnTypeMismatch>
    <PossiblyNullOperand occurrences="1">
      <code>$this-&gt;name</code>
    </PossiblyNullOperand>
  </file>
  <file src="src/Generator/DocBlock/Tag/LicenseTag.php">
    <LessSpecificReturnStatement occurrences="1">
      <code>$tagManager-&gt;createTagFromReflection($reflectionTag)</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType occurrences="1">
      <code>ReturnTag</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Generator/DocBlock/Tag/MethodTag.php">
    <RedundantCastGivenDocblockType occurrences="1">
      <code>(bool) $isStatic</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Generator/DocBlock/Tag/ParamTag.php">
    <LessSpecificReturnStatement occurrences="2">
      <code>$tagManager-&gt;createTagFromReflection($reflectionTag)</code>
      <code>$this-&gt;setTypes($datatype)</code>
    </LessSpecificReturnStatement>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$types</code>
    </MixedArgumentTypeCoercion>
    <MoreSpecificReturnType occurrences="2">
      <code>ParamTag</code>
      <code>ParamTag</code>
    </MoreSpecificReturnType>
    <PropertyNotSetInConstructor occurrences="1">
      <code>$variableName</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Generator/DocBlock/Tag/ReturnTag.php">
    <LessSpecificReturnStatement occurrences="2">
      <code>$tagManager-&gt;createTagFromReflection($reflectionTag)</code>
      <code>$this-&gt;setTypes($datatype)</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType occurrences="2">
      <code>ReturnTag</code>
      <code>ReturnTag</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Generator/DocBlockGenerator.php">
    <DeprecatedClass occurrences="1">
      <code>new Tag()</code>
    </DeprecatedClass>
    <MixedArgument occurrences="3">
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="1">
      <code>$value</code>
    </MixedAssignment>
    <MixedReturnTypeCoercion occurrences="2">
      <code>$this-&gt;tags</code>
      <code>TagInterface[]</code>
    </MixedReturnTypeCoercion>
    <RedundantCastGivenDocblockType occurrences="1">
      <code>(bool) $value</code>
    </RedundantCastGivenDocblockType>
    <UnsafeInstantiation occurrences="2">
      <code>new static()</code>
      <code>new static()</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/EnumGenerator/Cases/BackedCases.php">
    <DocblockTypeContradiction occurrences="2">
      <code>$type === 'int' || $type === 'string'</code>
      <code>$type === 'string'</code>
    </DocblockTypeContradiction>
  </file>
  <file src="src/Generator/EnumGenerator/Cases/CaseFactory.php">
    <ArgumentTypeCoercion occurrences="3">
      <code>$backingType-&gt;getName()</code>
      <code>static fn(ReflectionEnumBackedCase $case): string =&gt; $case-&gt;getName()</code>
      <code>static fn(ReflectionEnumBackedCase $case): string|int =&gt; $case-&gt;getBackingValue()</code>
    </ArgumentTypeCoercion>
    <LessSpecificReturnStatement occurrences="2">
      <code>$case-&gt;getName()</code>
      <code>$singleCase-&gt;getName()</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType occurrences="2">
      <code>non-empty-string</code>
      <code>non-empty-string</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Generator/FileGenerator.php">
    <DeprecatedMethod occurrences="3">
      <code>ClassGenerator::fromArray($class)</code>
      <code>ClassGenerator::fromArray($value)</code>
      <code>DeclareStatement::fromArray([$directive =&gt; $value])</code>
    </DeprecatedMethod>
    <InvalidArgument occurrences="1">
      <code>$docBlock</code>
    </InvalidArgument>
    <InvalidReturnStatement occurrences="1">
      <code>$uses</code>
    </InvalidReturnStatement>
    <InvalidReturnType occurrences="1">
      <code>array&lt;int, array{string, null|string, false|null|string}&gt;</code>
    </InvalidReturnType>
    <MissingClosureParamType occurrences="1">
      <code>$value</code>
    </MissingClosureParamType>
    <MixedArgument occurrences="5">
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="2">
      <code>$name</code>
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="1">
      <code>$value</code>
    </MixedAssignment>
    <PossiblyNullArgument occurrences="1">
      <code>current($use)</code>
    </PossiblyNullArgument>
    <PossiblyUndefinedArrayOffset occurrences="2">
      <code>$alias</code>
      <code>$import</code>
    </PossiblyUndefinedArrayOffset>
    <RedundantCastGivenDocblockType occurrences="3">
      <code>(string) $body</code>
      <code>(string) $filename</code>
      <code>(string) $namespace</code>
    </RedundantCastGivenDocblockType>
    <UnsafeInstantiation occurrences="1">
      <code>new static()</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/InterfaceGenerator.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$name</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod occurrences="1">
      <code>DocBlockGenerator::fromArray($value)</code>
    </DeprecatedMethod>
    <MixedArgument occurrences="6">
      <code>$array['name']</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="2">
      <code>$value</code>
      <code>$value</code>
    </MixedAssignment>
    <UnsafeInstantiation occurrences="2">
      <code>new static($array['name'])</code>
      <code>new static($classReflection-&gt;getName())</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/MethodGenerator.php">
    <DeprecatedMethod occurrences="2">
      <code>DocBlockGenerator::fromArray($value)</code>
      <code>ParameterGenerator::fromArray($parameter)</code>
    </DeprecatedMethod>
    <MixedArgument occurrences="11">
      <code>$array['name']</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="1">
      <code>$value</code>
    </MixedAssignment>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionMethod-&gt;getDocBlock()</code>
    </PossiblyFalseArgument>
    <RedundantCastGivenDocblockType occurrences="1">
      <code>(bool) $returnsReference</code>
    </RedundantCastGivenDocblockType>
    <UnsafeInstantiation occurrences="2">
      <code>new static($array['name'])</code>
      <code>new static()</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/ParameterGenerator.php">
    <MixedArgument occurrences="8">
      <code>$array['name']</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="1">
      <code>$value</code>
    </MixedAssignment>
    <RedundantCastGivenDocblockType occurrences="4">
      <code>(bool) $passedByReference</code>
      <code>(bool) $variadic</code>
      <code>(int) $position</code>
      <code>(string) $name</code>
    </RedundantCastGivenDocblockType>
    <UnsafeInstantiation occurrences="1">
      <code>new static($array['name'])</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/PropertyGenerator.php">
    <DeprecatedMethod occurrences="1">
      <code>DocBlockGenerator::fromArray($value)</code>
    </DeprecatedMethod>
    <MixedArgument occurrences="9">
      <code>$array['name']</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="1">
      <code>$defaultValue</code>
    </MixedAssignment>
    <UnsafeInstantiation occurrences="2">
      <code>new static($array['name'])</code>
      <code>new static()</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/TraitGenerator.php">
    <DeprecatedMethod occurrences="1">
      <code>DocBlockGenerator::fromArray($value)</code>
    </DeprecatedMethod>
    <MixedArgument occurrences="6">
      <code>$array['name']</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$name</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment occurrences="1">
      <code>$value</code>
    </MixedAssignment>
    <PossiblyFalseArgument occurrences="1">
      <code>$classReflection-&gt;getDocBlock()</code>
    </PossiblyFalseArgument>
    <UnsafeInstantiation occurrences="2">
      <code>new static($array['name'])</code>
      <code>new static($classReflection-&gt;getName())</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/TraitUsageGenerator.php">
    <DocblockTypeContradiction occurrences="2">
      <code>is_string($alias)</code>
    </DocblockTypeContradiction>
    <MixedArgument occurrences="6">
      <code>$method</code>
      <code>$this-&gt;traitOverrides[$method]</code>
      <code>$this-&gt;traitOverrides[$traitAndMethod]</code>
      <code>$traitAndMethod</code>
      <code>$traitAndMethod</code>
      <code>$traitAndMethod</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$traits</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess occurrences="1">
      <code>$this-&gt;traitOverrides[$method][$key]</code>
    </MixedArrayAccess>
    <MixedArrayAssignment occurrences="1">
      <code>$this-&gt;traitOverrides[$traitAndMethod][]</code>
    </MixedArrayAssignment>
    <MixedArrayOffset occurrences="4">
      <code>$this-&gt;traitOverrides[$method][$key]</code>
      <code>$this-&gt;traitOverrides[$traitAndMethod]</code>
      <code>$this-&gt;traitOverrides[$traitAndMethod]</code>
      <code>$this-&gt;traitOverrides[$traitAndMethod]</code>
    </MixedArrayOffset>
    <MixedArrayTypeCoercion occurrences="1">
      <code>$this-&gt;traitOverrides[$traitAndMethod]</code>
    </MixedArrayTypeCoercion>
    <MixedAssignment occurrences="7">
      <code>$alias</code>
      <code>$insteadof</code>
      <code>$insteadofTrait</code>
      <code>$insteadofTraits</code>
      <code>$key</code>
      <code>$traitAndMethod</code>
      <code>$traitToRemove</code>
    </MixedAssignment>
    <MixedOperand occurrences="1">
      <code>$insteadofTrait</code>
    </MixedOperand>
    <TooFewArguments occurrences="1">
      <code>addTraitOverride</code>
    </TooFewArguments>
    <UndefinedMethod occurrences="1">
      <code>addAlias</code>
    </UndefinedMethod>
    <UnusedForeachValue occurrences="2">
      <code>$value</code>
      <code>$value</code>
    </UnusedForeachValue>
    <UnusedVariable occurrences="6">
      <code>$key</code>
      <code>$key</code>
      <code>$key</code>
      <code>$key</code>
      <code>$method</code>
      <code>$method</code>
    </UnusedVariable>
  </file>
  <file src="src/Generator/TypeGenerator.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>static fn(ReflectionNamedType $type): string =&gt; self::reflectionNamedTypeToString($type, $currentClass)</code>
    </ArgumentTypeCoercion>
    <ImpureMethodCall occurrences="5">
      <code>allowsNull</code>
      <code>getName</code>
      <code>getName</code>
      <code>getParentClass</code>
      <code>getTypes</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Generator/ValueGenerator.php">
    <DeprecatedMethod occurrences="1">
      <code>getConstants</code>
    </DeprecatedMethod>
    <DocblockTypeContradiction occurrences="1">
      <code>$constants instanceof StdlibArrayObject</code>
    </DocblockTypeContradiction>
    <MissingReturnType occurrences="1">
      <code>initEnvironmentConstants</code>
    </MissingReturnType>
    <MixedArgument occurrences="3">
      <code>$constant</code>
      <code>$n</code>
      <code>$value</code>
    </MixedArgument>
    <MixedAssignment occurrences="5">
      <code>$constant</code>
      <code>$curValue</code>
      <code>$n</code>
      <code>$v</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedOperand occurrences="1">
      <code>$value</code>
    </MixedOperand>
    <RedundantCastGivenDocblockType occurrences="3">
      <code>(int) $arrayDepth</code>
      <code>(string) $outputMode</code>
      <code>(string) $type</code>
    </RedundantCastGivenDocblockType>
    <UnevaluatedCode occurrences="1">
      <code>'float'</code>
    </UnevaluatedCode>
  </file>
  <file src="src/Generic/Prototype/PrototypeClassFactory.php">
    <MixedAssignment occurrences="1">
      <code>$newPrototype</code>
    </MixedAssignment>
    <MixedInferredReturnType occurrences="1">
      <code>PrototypeInterface</code>
    </MixedInferredReturnType>
    <MixedMethodCall occurrences="1">
      <code>setName</code>
    </MixedMethodCall>
    <MixedReturnStatement occurrences="1">
      <code>$newPrototype</code>
    </MixedReturnStatement>
    <PossiblyInvalidClone occurrences="1">
      <code>clone $this-&gt;genericPrototype</code>
    </PossiblyInvalidClone>
  </file>
  <file src="src/Reflection/ClassReflection.php">
    <InvalidThrow occurrences="1">
      <code>Exception\ExceptionInterface</code>
    </InvalidThrow>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$lines</code>
    </MixedArgumentTypeCoercion>
    <PossiblyFalseArgument occurrences="1">
      <code>$startnum</code>
    </PossiblyFalseArgument>
    <PossiblyFalseOperand occurrences="2">
      <code>$startnum</code>
      <code>$this-&gt;getStartLine()</code>
    </PossiblyFalseOperand>
    <PossiblyFalseReference occurrences="1">
      <code>getStartLine</code>
    </PossiblyFalseReference>
  </file>
  <file src="src/Reflection/DocBlock/Tag/GenericTag.php">
    <ImplementedReturnTypeMismatch occurrences="1">
      <code>string|null</code>
    </ImplementedReturnTypeMismatch>
    <PossiblyNullOperand occurrences="1">
      <code>$this-&gt;name</code>
    </PossiblyNullOperand>
  </file>
  <file src="src/Reflection/DocBlockReflection.php">
    <DocblockTypeContradiction occurrences="1">
      <code>! is_string($filter)</code>
    </DocblockTypeContradiction>
    <MixedArgument occurrences="3">
      <code>$tag['name']</code>
      <code>$tag['value']</code>
      <code>$this-&gt;docComment</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="2">
      <code>$tag['name']</code>
      <code>$tag['value']</code>
    </MixedArrayAccess>
    <MixedAssignment occurrences="9">
      <code>$returnTags[]</code>
      <code>$tag</code>
      <code>$tag</code>
      <code>$tag</code>
      <code>$tag</code>
      <code>$tag</code>
      <code>$this-&gt;docComment</code>
      <code>$this-&gt;endLine</code>
      <code>$this-&gt;startLine</code>
    </MixedAssignment>
    <MixedInferredReturnType occurrences="1">
      <code>DocBlockTagInterface|false</code>
    </MixedInferredReturnType>
    <MixedMethodCall occurrences="3">
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
    </MixedMethodCall>
    <MixedOperand occurrences="1">
      <code>$tag</code>
    </MixedOperand>
    <MixedReturnStatement occurrences="1">
      <code>$tag</code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion occurrences="3">
      <code>$returnTags</code>
      <code>$this-&gt;tags</code>
      <code>DocBlockTagInterface[]</code>
    </MixedReturnTypeCoercion>
    <PropertyNotSetInConstructor occurrences="3">
      <code>$endLine</code>
      <code>$reflector</code>
      <code>$startLine</code>
    </PropertyNotSetInConstructor>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>is_string($commentOrReflector)</code>
    </RedundantConditionGivenDocblockType>
    <UndefinedInterfaceMethod occurrences="2">
      <code>getStartLine</code>
      <code>getStartLine</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Reflection/FunctionReflection.php">
    <DeprecatedMethod occurrences="1">
      <code>detectType</code>
    </DeprecatedMethod>
    <MixedArgument occurrences="2">
      <code>$returnTypes</code>
      <code>$returnTypes</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="2">
      <code>$lines</code>
      <code>$lines</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess occurrences="1">
      <code>$returnTypes[0]</code>
    </MixedArrayAccess>
    <MixedAssignment occurrences="2">
      <code>$returnType</code>
      <code>$returnTypes</code>
    </MixedAssignment>
    <MixedOperand occurrences="1">
      <code>$prototype['return']</code>
    </MixedOperand>
    <PossiblyFalseOperand occurrences="2">
      <code>strrpos($this-&gt;getName(), '\\')</code>
      <code>strrpos($this-&gt;getName(), '\\')</code>
    </PossiblyFalseOperand>
    <PossiblyFalseReference occurrences="2">
      <code>getDescription</code>
      <code>getTypes</code>
    </PossiblyFalseReference>
    <PossiblyInvalidOperand occurrences="6">
      <code>$endLine</code>
      <code>$endLine</code>
      <code>$startLine</code>
      <code>$startLine</code>
      <code>$startLine</code>
      <code>$startLine</code>
    </PossiblyInvalidOperand>
    <UndefinedInterfaceMethod occurrences="2">
      <code>getDescription</code>
      <code>getTypes</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Reflection/MethodReflection.php">
    <DeprecatedMethod occurrences="1">
      <code>detectType</code>
    </DeprecatedMethod>
    <MixedArgument occurrences="5">
      <code>$haystack[$i][0]</code>
      <code>$haystack[$i][0]</code>
      <code>$haystack[$i][0]</code>
      <code>$returnTypes</code>
      <code>$returnTypes</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$lines</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess occurrences="1">
      <code>$returnTypes[0]</code>
    </MixedArrayAccess>
    <MixedAssignment occurrences="7">
      <code>$returnType</code>
      <code>$returnTypes</code>
      <code>$tokenType</code>
      <code>$tokenType</code>
      <code>$tokenType</code>
      <code>$tokenValue</code>
      <code>$tokenValue</code>
    </MixedAssignment>
    <MixedOperand occurrences="2">
      <code>$prototype['return']</code>
      <code>$tokenValue</code>
    </MixedOperand>
    <PossiblyFalseReference occurrences="2">
      <code>getStartLine</code>
      <code>getTypes</code>
    </PossiblyFalseReference>
    <UndefinedInterfaceMethod occurrences="1">
      <code>getTypes</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Reflection/ParameterReflection.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$function-&gt;getName()</code>
    </ArgumentTypeCoercion>
    <ImpureMethodCall occurrences="13">
      <code>getDeclaringClass</code>
      <code>getDocBlock</code>
      <code>getModifiers</code>
      <code>getModifiers</code>
      <code>getModifiers</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getProperty</code>
      <code>getTags</code>
    </ImpureMethodCall>
    <MixedInferredReturnType occurrences="1">
      <code>string|null</code>
    </MixedInferredReturnType>
    <MixedReturnStatement occurrences="1">
      <code>$type-&gt;getName()</code>
    </MixedReturnStatement>
    <UndefinedMethod occurrences="3">
      <code>getName</code>
      <code>getName</code>
      <code>isBuiltin</code>
    </UndefinedMethod>
  </file>
  <file src="src/Scanner/DocBlockScanner.php">
    <MissingClosureParamType occurrences="3">
      <code>$length</code>
      <code>$positionsForward</code>
      <code>$type</code>
    </MissingClosureParamType>
    <MissingClosureReturnType occurrences="9">
      <code>function ($length) use (&amp;$currentWord, &amp;$tokens, &amp;$tokenIndex) {</code>
      <code>function ($positionsForward = 1) use (</code>
      <code>function ($type) use (&amp;$tokenIndex, &amp;$tokens) {</code>
      <code>function () use (&amp;$currentChar, &amp;$tokens, &amp;$tokenIndex) {</code>
      <code>function () use (&amp;$currentLine, &amp;$MACRO_STREAM_ADVANCE_CHAR) {</code>
      <code>function () use (&amp;$currentLine, &amp;$tokens, &amp;$tokenIndex) {</code>
      <code>function () use (&amp;$currentWord, &amp;$MACRO_STREAM_ADVANCE_CHAR) {</code>
      <code>function () use (&amp;$currentWord, &amp;$tokens, &amp;$tokenIndex) {</code>
      <code>function () use (&amp;$tokenIndex, &amp;$tokens) {</code>
    </MissingClosureReturnType>
    <MixedArgument occurrences="9">
      <code>$currentLine</code>
      <code>$currentWord</code>
      <code>$currentWord</code>
      <code>$length</code>
      <code>$stream</code>
      <code>$stream</code>
      <code>$streamIndex</code>
      <code>$streamIndex</code>
      <code>$tokens</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="15">
      <code>$stream[$streamIndex]</code>
      <code>$this-&gt;tags[$tagIndex]['value']</code>
      <code>$this-&gt;tags[$tagIndex]['value']</code>
      <code>$token[0]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
    </MixedArrayAccess>
    <MixedArrayAssignment occurrences="7">
      <code>$this-&gt;tags[$tagIndex]['value']</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
    </MixedArrayAssignment>
    <MixedArrayOffset occurrences="9">
      <code>$stream[$streamIndex]</code>
      <code>$stream[$streamIndex]</code>
      <code>$this-&gt;tags[$tagIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
      <code>$tokens[$tokenIndex]</code>
    </MixedArrayOffset>
    <MixedAssignment occurrences="11">
      <code>$context</code>
      <code>$context</code>
      <code>$context</code>
      <code>$context</code>
      <code>$context</code>
      <code>$currentChar</code>
      <code>$positionsForward</code>
      <code>$streamIndex</code>
      <code>$token</code>
      <code>$tokenIndex</code>
      <code>$tokens[$tokenIndex][0]</code>
    </MixedAssignment>
    <MixedFunctionCall occurrences="5">
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR()</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR(strlen($currentLine))</code>
      <code>$MACRO_STREAM_ADVANCE_CHAR(strlen($currentWord))</code>
    </MixedFunctionCall>
    <MixedInferredReturnType occurrences="1">
      <code>array</code>
    </MixedInferredReturnType>
    <MixedOperand occurrences="20">
      <code>$CONTEXT_INSIDE_ASTERISK</code>
      <code>$CONTEXT_INSIDE_ASTERISK</code>
      <code>$CONTEXT_INSIDE_ASTERISK</code>
      <code>$CONTEXT_INSIDE_DOCBLOCK</code>
      <code>$CONTEXT_INSIDE_DOCBLOCK</code>
      <code>$CONTEXT_INSIDE_DOCBLOCK</code>
      <code>$context</code>
      <code>$streamIndex</code>
      <code>$this-&gt;tags[$tagIndex]['value']</code>
      <code>$tokenIndex</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$token[1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>$tokens[$tokenIndex][1]</code>
      <code>~$CONTEXT_INSIDE_ASTERISK</code>
      <code>~$CONTEXT_INSIDE_DOCBLOCK</code>
    </MixedOperand>
    <MixedReturnStatement occurrences="1">
      <code>$tokens</code>
    </MixedReturnStatement>
    <RedundantCondition occurrences="3">
      <code>$context === 0x00</code>
      <code>$mode &lt;= 2</code>
      <code>$this-&gt;shortDescription != '' &amp;&amp; $tagIndex === null</code>
    </RedundantCondition>
    <TypeDoesNotContainType occurrences="1">
      <code>$tagIndex !== null</code>
    </TypeDoesNotContainType>
    <UnusedVariable occurrences="5">
      <code>$MACRO_TOKEN_APPEND_WORD_PARTIAL</code>
      <code>$context</code>
      <code>$context</code>
      <code>$mode</code>
      <code>$tagIndex</code>
    </UnusedVariable>
  </file>
  <file src="test/Generator/AbstractGeneratorTest.php">
    <MissingReturnType occurrences="2">
      <code>testConstructor</code>
      <code>testSetOptionsThrowsExceptionOnInvalidArgument</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/AbstractMemberGeneratorTest.php">
    <InvalidArgument occurrences="1">
      <code>new stdClass()</code>
    </InvalidArgument>
    <MissingReturnType occurrences="2">
      <code>testSetDocBlockThrowsExceptionWithInvalidType</code>
      <code>testSetFlagsWithArray</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/Cases/BackedCasesTest.php">
    <InvalidArgument occurrences="1">
      <code>'bool'</code>
    </InvalidArgument>
  </file>
  <file src="test/Generator/ClassGeneratorTest.php">
    <ArgumentTypeCoercion occurrences="7">
      <code>''</code>
      <code>'ExtendedClass'</code>
      <code>'ExtendedClass'</code>
      <code>'ExtendedClass'</code>
      <code>'LaminasTest_Code_NsTest_BarClass'</code>
      <code>'ParentClass'</code>
      <code>['Class1', 'Class2']</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod occurrences="6"/>
    <InvalidArgument occurrences="6">
      <code>''</code>
      <code>'public'</code>
      <code>'public'</code>
      <code>ExceptionInterface::class</code>
      <code>[]</code>
      <code>new ClassGenerator()</code>
    </InvalidArgument>
    <InvalidCast occurrences="2">
      <code>[]</code>
      <code>new ClassGenerator()</code>
    </InvalidCast>
    <InvalidScalarArgument occurrences="3">
      <code>true</code>
      <code>true</code>
      <code>true</code>
    </InvalidScalarArgument>
    <MissingDependency occurrences="2">
      <code>FooClass</code>
      <code>FooClass</code>
    </MissingDependency>
    <MixedArgument occurrences="6">
      <code>$overrides['myTrait::foo']</code>
      <code>$overrides['myTrait::foo']</code>
      <code>$overrides['myTrait::foo']</code>
      <code>$overrides['myTrait::foo']</code>
      <code>FooClass::class</code>
      <code>FooClass::class</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="3">
      <code>$overrides['myTrait::foo'][0]</code>
      <code>$overrides['myTrait::foo'][1]</code>
      <code>$overrides['myTrait::foo'][1]</code>
    </MixedArrayAccess>
    <PossiblyFalseReference occurrences="15">
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
      <code>getDefaultValue</code>
    </PossiblyFalseReference>
    <UndefinedClass occurrences="1">
      <code>['Class1', 'Class2']</code>
    </UndefinedClass>
  </file>
  <file src="test/Generator/DocBlock/Tag/AuthorTagTest.php">
    <InternalMethod occurrences="1">
      <code>new TagManager()</code>
    </InternalMethod>
    <MissingReturnType occurrences="5">
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testNameIsCorrect</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/GenericTagTest.php">
    <InternalMethod occurrences="1">
      <code>new TagManager()</code>
    </InternalMethod>
    <MissingReturnType occurrences="4">
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/LicenseTagTest.php">
    <InternalMethod occurrences="1">
      <code>new TagManager()</code>
    </InternalMethod>
    <MissingReturnType occurrences="5">
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testLicenseProducesCorrectDocBlockLine</code>
      <code>testNameIsCorrect</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/MethodTagTest.php">
    <InternalMethod occurrences="1">
      <code>new TagManager()</code>
    </InternalMethod>
    <MissingReturnType occurrences="6">
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testGetterForMethodNameTrimsCorrectly</code>
      <code>testNameIsCorrect</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/ParamTagTest.php">
    <InternalMethod occurrences="1">
      <code>new TagManager()</code>
    </InternalMethod>
    <MissingReturnType occurrences="6">
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testGetterForVariableNameTrimsCorrectly</code>
      <code>testNameIsCorrect</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/PropertyTagTest.php">
    <InternalMethod occurrences="1">
      <code>new TagManager()</code>
    </InternalMethod>
    <MissingReturnType occurrences="6">
      <code>testConstructorWithOptions</code>
      <code>testCreatingTagFromReflection</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testGetterForVariableNameTrimsCorrectly</code>
      <code>testNameIsCorrect</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/ReturnTagTest.php">
    <InternalMethod occurrences="1">
      <code>new TagManager()</code>
    </InternalMethod>
    <MissingReturnType occurrences="3">
      <code>testCreatingTagFromReflection</code>
      <code>testNameIsCorrect</code>
      <code>testReturnProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/ThrowsTagTest.php">
    <InternalMethod occurrences="1">
      <code>new TagManager()</code>
    </InternalMethod>
    <MissingReturnType occurrences="3">
      <code>testCreatingTagFromReflection</code>
      <code>testNameIsCorrect</code>
      <code>testParamProducesCorrectDocBlockLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$reflectionTag</code>
    </PossiblyFalseArgument>
    <PossiblyNullPropertyAssignmentValue occurrences="2">
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/TypableTagTest.php">
    <MissingReturnType occurrences="6">
      <code>testConstructorWithOptions</code>
      <code>testGetterAndSetterPersistValue</code>
      <code>testGetterForTypesAsStringWithMultipleTypes</code>
      <code>testGetterForTypesAsStringWithMultipleTypesAndDelimiter</code>
      <code>testGetterForTypesAsStringWithSingleType</code>
      <code>testGetterForTypesAsStringWithSingleTypeAndDelimiter</code>
    </MissingReturnType>
    <PossiblyNullPropertyAssignmentValue occurrences="1">
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Generator/DocBlock/Tag/VarTagTest.php">
    <InternalMethod occurrences="3">
      <code>new TagManager()</code>
      <code>setVariableName</code>
      <code>setVariableName</code>
    </InternalMethod>
  </file>
  <file src="test/Generator/DocBlockGeneratorTest.php">
    <DeprecatedMethod occurrences="3">
      <code>setDatatype</code>
      <code>setDatatype</code>
    </DeprecatedMethod>
    <MissingReturnType occurrences="15">
      <code>testCanPassTagsToConstructor</code>
      <code>testCreateFromArray</code>
      <code>testDocBlockFromReflectionAuthorTag</code>
      <code>testDocBlockFromReflectionLicenseTag</code>
      <code>testDocBlockFromReflectionLongDescription</code>
      <code>testDocBlockFromReflectionParamTag</code>
      <code>testDocBlockFromReflectionReturnTag</code>
      <code>testDocBlockFromReflectionShortDescription</code>
      <code>testDocBlockFromReflectionTagsCount</code>
      <code>testGenerateWithWordWrapDisabled</code>
      <code>testGenerateWordWrapIsEnabledByDefault</code>
      <code>testGenerationOfDocBlock</code>
      <code>testLongDescriptionGetterAndSetter</code>
      <code>testShortDescriptionGetterAndSetter</code>
      <code>testTagGettersAndSetters</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/FileGeneratorTest.php">
    <DeprecatedMethod occurrences="9"/>
    <InvalidArgument occurrences="1">
      <code>$file-&gt;getUses()</code>
    </InvalidArgument>
    <MissingReturnType occurrences="16">
      <code>testClassNotFoundException</code>
      <code>testConstruction</code>
      <code>testCreateFromArrayWithClassFromArray</code>
      <code>testCreateFromArrayWithClassInstance</code>
      <code>testFileLineEndingsAreAlwaysLineFeed</code>
      <code>testGeneratesNamespaceStatements</code>
      <code>testGeneratesUseStatements</code>
      <code>testIndentationGetterAndSetter</code>
      <code>testSetUseAllowsMultipleAliasedUseStatements</code>
      <code>testSetUseDoesntGenerateMultipleIdenticalUseStatements</code>
      <code>testSetUsesDoesntGenerateMultipleIdenticalUseStatements</code>
      <code>testSetUsesWithArrays</code>
      <code>testSetUsesWithGetUses</code>
      <code>testSetUsesWithString</code>
      <code>testSourceContentGetterAndSetter</code>
      <code>testToString</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/InterfaceGeneratorTest.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>['Class1', 'Class2']</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod occurrences="3"/>
    <MissingReturnType occurrences="17">
      <code>testAbstractAccessorsReturnsFalse</code>
      <code>testClassNotAnInterfaceException</code>
      <code>testCodeGenerationShouldTakeIntoAccountNamespacesFromReflection</code>
      <code>testCreateFromArrayWithDocBlockFromArray</code>
      <code>testCreateFromArrayWithDocBlockInstance</code>
      <code>testExtendedClassAccessors</code>
      <code>testGenerateClassAndAddMethod</code>
      <code>testGenerateImplementsInterface</code>
      <code>testImplementedInterfacesAccessors</code>
      <code>testMethodAccessors</code>
      <code>testPassingANamespacedClassnameShouldGenerateAClassnameWithoutItsNamespace</code>
      <code>testPassingANamespacedClassnameShouldGenerateANamespaceDeclaration</code>
      <code>testPropertyAccessors</code>
      <code>testSetNameShouldDetermineIfNamespaceSegmentIsPresent</code>
      <code>testSetextendedclassShouldIgnoreEmptyClassnameOnGenerate</code>
      <code>testSetextendedclassShouldNotIgnoreNonEmptyClassnameOnGenerate</code>
      <code>testToString</code>
    </MissingReturnType>
    <PossiblyFalseReference occurrences="2">
      <code>isInterface</code>
      <code>isInterface</code>
    </PossiblyFalseReference>
    <UndefinedClass occurrences="1">
      <code>['Class1', 'Class2']</code>
    </UndefinedClass>
  </file>
  <file src="test/Generator/MethodGeneratorTest.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$className</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod occurrences="6">
      <code>ParameterGenerator::fromArray(['name' =&gt; 'bar', 'type' =&gt; 'array'])</code>
      <code>ParameterGenerator::fromArray(['name' =&gt; 'baz', 'type' =&gt; stdClass::class, 'position' =&gt; 1])</code>
      <code>ParameterGenerator::fromArray(['name' =&gt; 'baz', 'type' =&gt; stdClass::class])</code>
    </DeprecatedMethod>
    <InvalidArgument occurrences="1">
      <code>new stdClass()</code>
    </InvalidArgument>
    <MissingReturnType occurrences="22">
      <code>testByRefReturnType</code>
      <code>testCopyMethodSignature</code>
      <code>testCreateFromArray</code>
      <code>testCreateInterfaceMethodFromArray</code>
      <code>testDefaultValueGenerationDoesNotIncludeTrailingSemicolon</code>
      <code>testDocBlockGetterAndSetter</code>
      <code>testFrom</code>
      <code>testFromByReferenceMethodReflection</code>
      <code>testMethodBodyGetterAndSetter</code>
      <code>testMethodCanHaveDocBlock</code>
      <code>testMethodConstructor</code>
      <code>testMethodFromReflection</code>
      <code>testMethodFromReflectionMultiLinesIndention</code>
      <code>testMethodParameterAccessors</code>
      <code>testMethodParameterMutator</code>
      <code>testMethodWithFinalModifierIsEmitted</code>
      <code>testMethodWithFinalModifierIsNotEmittedWhenMethodIsAbstract</code>
      <code>testMethodWithStaticModifierIsEmitted</code>
      <code>testSetMethodParameter</code>
      <code>testSetMethodParameters</code>
      <code>testSetReturnType</code>
      <code>testSetReturnTypeWithNull</code>
    </MissingReturnType>
    <PossiblyNullReference occurrences="1">
      <code>generate</code>
    </PossiblyNullReference>
  </file>
  <file src="test/Generator/ParameterGeneratorTest.php">
    <ArgumentTypeCoercion occurrences="2">
      <code>'LaminasTest_Code_NsTest_BarClass'</code>
      <code>'Namespaced\TypeHint\Bar'</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod occurrences="1"/>
    <InvalidReturnStatement occurrences="1"/>
    <InvalidReturnType occurrences="1">
      <code>string[][]</code>
    </InvalidReturnType>
    <MissingReturnType occurrences="25">
      <code>testCallableTypeHint</code>
      <code>testCreateFromArray</code>
      <code>testDefaultValueGetterAndSetterPersistValue</code>
      <code>testFromReflectionGenerate</code>
      <code>testFromReflectionGetArrayHint</code>
      <code>testFromReflectionGetDefaultValue</code>
      <code>testFromReflectionGetDefaultValueNotOptional</code>
      <code>testFromReflectionGetParameterName</code>
      <code>testFromReflectionGetParameterType</code>
      <code>testFromReflectionGetReference</code>
      <code>testFromReflectionGetWithNativeType</code>
      <code>testGenerateIsCorrect</code>
      <code>testGeneratedParametersHaveEscapedDefaultValues</code>
      <code>testGeneratesSimpleHints</code>
      <code>testGetInternalClassDefaultParameterValue</code>
      <code>testNameGetterAndSetterPersistValue</code>
      <code>testOmitType</code>
      <code>testParameterGeneratorReturnsCorrectTypeForNonNamespaceClasses</code>
      <code>testPositionGetterAndSetterPersistValue</code>
      <code>testSetGetVariadic</code>
      <code>testTypeGetterAndSetterPersistValue</code>
      <code>testTypeHintFromReflection</code>
      <code>testTypeHintFromReflectionGeneratedCode</code>
      <code>testTypeHintWithValidClassName</code>
      <code>testTypehintsWithNamespaceInNamepsacedClassReturnTypewithBackslash</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/PropertyGeneratorTest.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$type</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod occurrences="3"/>
    <InvalidArgument occurrences="1">
      <code>new stdClass()</code>
    </InvalidArgument>
    <InvalidReturnStatement occurrences="1"/>
    <InvalidReturnType occurrences="1">
      <code>bool[][]|string[][]|int[][]|null[][]</code>
    </InvalidReturnType>
    <MissingReturnType occurrences="1">
      <code>testOmitType</code>
    </MissingReturnType>
    <MixedAssignment occurrences="1">
      <code>$generator</code>
    </MixedAssignment>
    <MixedInferredReturnType occurrences="1">
      <code>Generator</code>
    </MixedInferredReturnType>
    <PossiblyInvalidArgument occurrences="3">
      <code>testSetBogusTypeSetValueGenerateUseAutoDetection</code>
      <code>testSetDefaultValue</code>
      <code>testSetTypeSetValueGenerate</code>
    </PossiblyInvalidArgument>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>assertIsArray</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Generator/PropertyValueGeneratorTest.php">
    <MissingReturnType occurrences="1">
      <code>testPropertyValueAddsSemicolonToValueGenerator</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/TraitGeneratorTest.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>'LaminasTest_Code_NsTest_BarClass'</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod occurrences="6"/>
    <InvalidArgument occurrences="1">
      <code>ExceptionInterface::class</code>
    </InvalidArgument>
    <InvalidScalarArgument occurrences="2">
      <code>true</code>
      <code>true</code>
    </InvalidScalarArgument>
  </file>
  <file src="test/Generator/TypeGeneratorTest.php">
    <MissingReturnType occurrences="4">
      <code>testFromValidTypeString</code>
      <code>testIsAGenerator</code>
      <code>testRejectsInvalidTypeString</code>
      <code>testStringCastFromValidTypeString</code>
    </MissingReturnType>
  </file>
  <file src="test/Generator/ValueGeneratorTest.php">
    <DeprecatedMethod occurrences="5">
      <code>getConstants</code>
      <code>getConstants</code>
      <code>initEnvironmentConstants</code>
      <code>initEnvironmentConstants</code>
      <code>initEnvironmentConstants</code>
    </DeprecatedMethod>
    <InvalidArgument occurrences="1">
      <code>$constants</code>
    </InvalidArgument>
    <MissingReturnType occurrences="9">
      <code>testEscaping</code>
      <code>testPropertyDefaultValueCanHandleArray</code>
      <code>testPropertyDefaultValueCanHandleArrayWithUnsortedKeys</code>
      <code>testPropertyDefaultValueCanHandleBool</code>
      <code>testPropertyDefaultValueCanHandleComplexArrayOfTypes</code>
      <code>testPropertyDefaultValueCanHandleStrings</code>
      <code>testPropertyDefaultValueCanHandleUnquotedString</code>
      <code>testPropertyDefaultValueConstructor</code>
      <code>testPropertyDefaultValueIsSettable</code>
    </MissingReturnType>
    <MixedInferredReturnType occurrences="5">
      <code>Generator</code>
      <code>array</code>
      <code>array</code>
      <code>array</code>
      <code>array</code>
    </MixedInferredReturnType>
  </file>
  <file src="test/Generic/Prototype/PrototypeClassFactoryTest.php">
    <DeprecatedMethod occurrences="1">
      <code>setMethods</code>
    </DeprecatedMethod>
    <InternalMethod occurrences="1">
      <code>new PrototypeClassFactory()</code>
    </InternalMethod>
    <MissingReturnType occurrences="3">
      <code>testAddAndGetPrototype</code>
      <code>testFallBackToGeneric</code>
      <code>testSetNameOnGenericIsCalledOnce</code>
    </MissingReturnType>
    <PossiblyNullPropertyAssignmentValue occurrences="1">
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="test/Reflection/ClassReflectionTest.php">
    <ArgumentTypeCoercion occurrences="2">
      <code>'ReflectionClass'</code>
      <code>__NAMESPACE__ . '\\' . $className</code>
    </ArgumentTypeCoercion>
    <MissingReturnType occurrences="10">
      <code>testGetContentsReturnsContents</code>
      <code>testGetContentsReturnsContentsWithImplementsOnSeparateLine</code>
      <code>testGetContentsReturnsEmptyContentsOnEvaldCode</code>
      <code>testGetContentsReturnsEmptyContentsOnInternalCode</code>
      <code>testGetTraits</code>
      <code>testInterfaceReturn</code>
      <code>testMethodReturns</code>
      <code>testParentReturn</code>
      <code>testPropertyReturns</code>
      <code>testStartLine</code>
    </MissingReturnType>
    <PossiblyFalseArgument occurrences="1">
      <code>$parent</code>
    </PossiblyFalseArgument>
    <PossiblyFalseReference occurrences="1">
      <code>getName</code>
    </PossiblyFalseReference>
    <PossiblyInvalidArrayOffset occurrences="1">
      <code>$traitsArray[TestTraitClass3::class]</code>
    </PossiblyInvalidArrayOffset>
  </file>
  <file src="test/Reflection/DocBlock/Tag/AuthorTagTest.php">
    <MissingReturnType occurrences="2">
      <code>testParseName</code>
      <code>testParseNameAndEmail</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/GenericTagTest.php">
    <MissingReturnType occurrences="1">
      <code>testParse</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/LicenseTagTest.php">
    <MissingReturnType occurrences="2">
      <code>testParseUrl</code>
      <code>testParseUrlAndLicenseName</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/MethodTagTest.php">
    <DeprecatedMethod occurrences="5">
      <code>getReturnType</code>
      <code>getReturnType</code>
      <code>getReturnType</code>
      <code>getReturnType</code>
      <code>getReturnType</code>
    </DeprecatedMethod>
    <MissingReturnType occurrences="5">
      <code>testParseName</code>
      <code>testParseNameAndStatic</code>
      <code>testParseNameAndStaticAndDescription</code>
      <code>testParseNameAndType</code>
      <code>testParseNameAndTypeAndStaticAndDescription</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/PropertyTagTest.php">
    <DeprecatedMethod occurrences="4">
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
    </DeprecatedMethod>
    <MissingReturnType occurrences="4">
      <code>testParseName</code>
      <code>testParseNameAndDescription</code>
      <code>testParseTypeAndName</code>
      <code>testParseTypeAndNameAndDescription</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/ThrowsTagTest.php">
    <MissingReturnType occurrences="5">
      <code>testAllCharactersFromTypenameAreSupported</code>
      <code>testMultipleTypesWithDescription</code>
      <code>testMultipleTypesWithoutDescription</code>
      <code>testSingleTypeWithDescription</code>
      <code>testSingleTypeWithoutDescription</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/DocBlock/Tag/VarTagTest.php">
    <MissingReturnType occurrences="1">
      <code>testParse</code>
    </MissingReturnType>
    <MixedInferredReturnType occurrences="1">
      <code>array</code>
    </MixedInferredReturnType>
  </file>
  <file src="test/Reflection/DocBlockReflectionTest.php">
    <DeprecatedMethod occurrences="5">
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
    </DeprecatedMethod>
    <MissingReturnType occurrences="9">
      <code>testDocBlockContents</code>
      <code>testDocBlockLines</code>
      <code>testDocBlockLongDescription</code>
      <code>testDocBlockShortDescription</code>
      <code>testDocBlockTags</code>
      <code>testFunctionDocBlockTags</code>
      <code>testShortDocBlocks</code>
      <code>testTabbedDocBlockTags</code>
      <code>testToString</code>
    </MissingReturnType>
    <PossiblyFalseReference occurrences="26">
      <code>getContents</code>
      <code>getLongDescription</code>
      <code>getShortDescription</code>
      <code>getShortDescription</code>
      <code>getShortDescription</code>
      <code>getStartLine</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>getTags</code>
      <code>hasTag</code>
      <code>hasTag</code>
    </PossiblyFalseReference>
    <UndefinedInterfaceMethod occurrences="4">
      <code>getDescription</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/Reflection/FunctionReflectionTest.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>__NAMESPACE__ . '\\' . $functionName</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod occurrences="2">
      <code>getPrototype</code>
      <code>getPrototype</code>
    </DeprecatedMethod>
    <InvalidArgument occurrences="23">
      <code>'LaminasTest\Code\Reflection\TestAsset\function1'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function1'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function10'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function10'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function11'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function11'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function12'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function12'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function2'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function3'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function3'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function4'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function4'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function5'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function5'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function6'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function6'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function7'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function7'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function8'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function8'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function9'</code>
      <code>'LaminasTest\Code\Reflection\TestAsset\function9'</code>
    </InvalidArgument>
    <MissingReturnType occurrences="13">
      <code>testFunctionBodyReturn</code>
      <code>testFunctionClosureBodyReturn</code>
      <code>testFunctionClosureContentsReturnWithDocBlock</code>
      <code>testFunctionClosureContentsReturnWithoutDocBlock</code>
      <code>testFunctionContentsReturnWithDocBlock</code>
      <code>testFunctionContentsReturnWithoutDocBlock</code>
      <code>testFunctionDocBlockReturn</code>
      <code>testGetContentsReturnsEmptyContentsOnEvaldCode</code>
      <code>testGetContentsReturnsEmptyContentsOnInternalCode</code>
      <code>testGetPrototypeMethod</code>
      <code>testInternalFunctionBodyReturn</code>
      <code>testInternalFunctionContentsReturn</code>
      <code>testParemeterReturn</code>
    </MissingReturnType>
    <MixedArgument occurrences="14">
      <code>$function1</code>
      <code>$function10</code>
      <code>$function10</code>
      <code>$function2</code>
      <code>$function2</code>
      <code>$function3</code>
      <code>$function4</code>
      <code>$function5</code>
      <code>$function6</code>
      <code>$function7</code>
      <code>$function8</code>
      <code>$function9</code>
      <code>$function9</code>
      <code>$function9</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="3">
      <code>$list1['closure']</code>
      <code>$list2[0]</code>
      <code>$list3[0]</code>
    </MixedArrayAccess>
    <MixedAssignment occurrences="3">
      <code>$function5</code>
      <code>$function6</code>
      <code>$function7</code>
    </MixedAssignment>
    <PossiblyFalseArgument occurrences="18">
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
      <code>$body</code>
    </PossiblyFalseArgument>
    <UndefinedGlobalVariable occurrences="14">
      <code>$function1</code>
      <code>$function10</code>
      <code>$function10</code>
      <code>$function2</code>
      <code>$function2</code>
      <code>$function3</code>
      <code>$function4</code>
      <code>$function8</code>
      <code>$function9</code>
      <code>$function9</code>
      <code>$function9</code>
      <code>$list1</code>
      <code>$list2</code>
      <code>$list3</code>
    </UndefinedGlobalVariable>
  </file>
  <file src="test/Reflection/MethodReflectionTest.php">
    <ArgumentTypeCoercion occurrences="7">
      <code>'DOMDocument'</code>
      <code>'DOMDocument'</code>
      <code>'DateTime'</code>
      <code>'FooClass'</code>
      <code>'ReflectionClass'</code>
      <code>'ReflectionException'</code>
      <code>__NAMESPACE__ . '\\' . $className</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod occurrences="8">
      <code>getPrototype</code>
      <code>getPrototype</code>
      <code>getPrototype</code>
      <code>getPrototype</code>
      <code>getPrototype</code>
      <code>getPrototype</code>
      <code>getPrototype</code>
      <code>getPrototype</code>
    </DeprecatedMethod>
    <MissingReturnType occurrences="15">
      <code>testCanParseClassBodyWhenUsingTrait</code>
      <code>testCodeGetBodyReturnsEmptyWithCommentedFunction</code>
      <code>testCodeGetContentsDoesNotThrowExceptionOnDocBlock</code>
      <code>testDeclaringClassReturn</code>
      <code>testFunctionContentsReturnWithDocBlock</code>
      <code>testGetBodyReturnsCorrectBody</code>
      <code>testGetContentsReturnsEmptyContentsOnEvaldCode</code>
      <code>testGetContentsReturnsEmptyContentsOnInternalCode</code>
      <code>testGetContentsWithCoreClass</code>
      <code>testGetPrototypeMethod</code>
      <code>testInternalFunctionBodyReturn</code>
      <code>testInternalMethodContentsReturn</code>
      <code>testMethodContentsReturnWithoutDocBlock</code>
      <code>testParemeterReturn</code>
      <code>testStartLine</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/ParameterReflectionTest.php">
    <DeprecatedMethod occurrences="5">
      <code>detectType</code>
      <code>detectType</code>
      <code>detectType</code>
      <code>detectType</code>
      <code>detectType</code>
    </DeprecatedMethod>
    <MissingReturnType occurrences="9">
      <code>testCallableTypeHint</code>
      <code>testClassReturn</code>
      <code>testClassReturnNoClassGivenReturnsNull</code>
      <code>testDeclaringClassReturn</code>
      <code>testDetectType</code>
      <code>testDetectTypeWithDocBlockOnlyTypes</code>
      <code>testGetType</code>
      <code>testGetTypeWithDocBlockOnlyTypes</code>
      <code>testTypeReturn</code>
    </MissingReturnType>
    <UndefinedMethod occurrences="1">
      <code>getName</code>
    </UndefinedMethod>
  </file>
  <file src="test/Reflection/PropertyReflectionTest.php">
    <MissingReturnType occurrences="1">
      <code>testDeclaringClassReturn</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/ReflectionDocBlockTagTest.php">
    <MissingReturnType occurrences="12">
      <code>testAllowsMultipleSpacesInDocBlockTagLine</code>
      <code>testAllowsMultipleSpacesInDocBlockTagLine2</code>
      <code>testNamespaceInParam</code>
      <code>testPropertyVarDoc</code>
      <code>testReturnClassWithNamespace</code>
      <code>testTagDescriptionIsReturned</code>
      <code>testTagShouldAllowJustTagNameInDocBlockTagLine</code>
      <code>testTagShouldAllowMultipleWhitespacesBeforeDescription</code>
      <code>testToString</code>
      <code>testType</code>
      <code>testTypeParam</code>
      <code>testVariableName</code>
    </MissingReturnType>
    <MixedInferredReturnType occurrences="1">
      <code>array</code>
    </MixedInferredReturnType>
    <PossiblyFalseReference occurrences="29">
      <code>getAuthorEmail</code>
      <code>getAuthorName</code>
      <code>getContent</code>
      <code>getContent</code>
      <code>getDescription</code>
      <code>getDescription</code>
      <code>getDescription</code>
      <code>getName</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getTag</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getVariableName</code>
      <code>getVariableName</code>
      <code>getVariableName</code>
    </PossiblyFalseReference>
    <PossiblyInvalidCast occurrences="1">
      <code>$tag</code>
    </PossiblyInvalidCast>
    <UndefinedInterfaceMethod occurrences="16">
      <code>getAuthorEmail</code>
      <code>getAuthorName</code>
      <code>getContent</code>
      <code>getContent</code>
      <code>getDescription</code>
      <code>getDescription</code>
      <code>getDescription</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getType</code>
      <code>getVariableName</code>
      <code>getVariableName</code>
      <code>getVariableName</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="test/Reflection/TestAsset/CallableTypeHintClass.php">
    <MissingReturnType occurrences="1">
      <code>foo</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/TestAsset/FileOfFunctions.php">
    <MissingParamType occurrences="2">
      <code>$bar</code>
      <code>$foo</code>
    </MissingParamType>
    <MissingReturnType occurrences="2">
      <code>test1</code>
      <code>test2</code>
    </MissingReturnType>
    <UnusedParam occurrences="2">
      <code>$bar</code>
      <code>$foo</code>
    </UnusedParam>
  </file>
  <file src="test/Reflection/TestAsset/SampleAnnotation.php">
    <MissingParamType occurrences="1">
      <code>$content</code>
    </MissingParamType>
    <MissingPropertyType occurrences="1">
      <code>$content</code>
    </MissingPropertyType>
    <MissingReturnType occurrences="1">
      <code>initialize</code>
    </MissingReturnType>
    <MixedOperand occurrences="1">
      <code>$content</code>
    </MixedOperand>
  </file>
  <file src="test/Reflection/TestAsset/TestSampleClass10.php">
    <InvalidReturnStatement occurrences="1">
      <code>'mixedValue'</code>
    </InvalidReturnStatement>
    <InvalidReturnType occurrences="1">
      <code>int</code>
    </InvalidReturnType>
    <MissingParamType occurrences="2">
      <code>$two</code>
      <code>$two</code>
    </MissingParamType>
  </file>
  <file src="test/Reflection/TestAsset/TestSampleClass11.php">
    <MissingClosureParamType occurrences="1">
      <code>$foo</code>
    </MissingClosureParamType>
    <MissingClosureReturnType occurrences="1">
      <code>function($foo) { return $foo; }</code>
    </MissingClosureReturnType>
    <MissingParamType occurrences="3">
      <code>$one</code>
      <code>$three</code>
      <code>$two</code>
    </MissingParamType>
    <MissingReturnType occurrences="9">
      <code>doSomethingAgain</code>
      <code>doSomethingElse</code>
      <code>doStaticSomething</code>
      <code>emptyFunction</code>
      <code>getCacheKey</code>
      <code>inline1</code>
      <code>inline2</code>
      <code>inline3</code>
      <code>visibility</code>
    </MissingReturnType>
    <MixedAssignment occurrences="2">
      <code>$arg</code>
      <code>$argElement</code>
    </MixedAssignment>
    <MixedOperand occurrences="2">
      <code>$arg</code>
      <code>$argElement</code>
    </MixedOperand>
    <UnusedVariable occurrences="1">
      <code>$closure</code>
    </UnusedVariable>
  </file>
  <file src="test/Reflection/TestAsset/TestSampleClass13.php">
    <InvalidReturnType occurrences="1">
      <code>Something</code>
    </InvalidReturnType>
    <MissingReturnType occurrences="1">
      <code>doSomething</code>
    </MissingReturnType>
    <UndefinedDocblockClass occurrences="1">
      <code>Something</code>
    </UndefinedDocblockClass>
  </file>
  <file src="test/Reflection/TestAsset/TestSampleClass14.php">
    <MissingConstructor occurrences="4">
      <code>$onlyType</code>
      <code>$typeDescription</code>
      <code>$typeName</code>
      <code>$typeNameDescription</code>
    </MissingConstructor>
  </file>
  <file src="test/Reflection/TestAsset/TestSampleClass2.php">
    <MissingParamType occurrences="1">
      <code>$param1</code>
    </MissingParamType>
    <MissingPropertyType occurrences="2">
      <code>$_prop1</code>
      <code>$_prop2</code>
    </MissingPropertyType>
    <MissingReturnType occurrences="2">
      <code>getProp1</code>
      <code>getProp2</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/TestAsset/TestSampleClass5.php">
    <InvalidReturnStatement occurrences="1">
      <code>'mixedValue'</code>
    </InvalidReturnStatement>
    <InvalidReturnType occurrences="1">
      <code>int</code>
    </InvalidReturnType>
    <MissingParamType occurrences="2">
      <code>$two</code>
      <code>$two</code>
    </MissingParamType>
  </file>
  <file src="test/Reflection/TestAsset/TestSampleClass6.php">
    <UnusedVariable occurrences="2">
      <code>$alsoAssigined</code>
      <code>$assigned</code>
    </UnusedVariable>
  </file>
  <file src="test/Reflection/TestAsset/TestSampleClass7.php">
    <InvalidReturnType occurrences="1">
      <code>Laminas\Code\Reflection\DocBlock</code>
    </InvalidReturnType>
    <UndefinedDocblockClass occurrences="1">
      <code>Laminas\Code\Reflection\DocBlock</code>
    </UndefinedDocblockClass>
  </file>
  <file src="test/Reflection/TestAsset/TestSampleClass8.php">
    <InvalidReturnType occurrences="1">
      <code>Laminas\Code\Reflection\DocBlock</code>
    </InvalidReturnType>
    <UndefinedDocblockClass occurrences="1">
      <code>Laminas\Code\Reflection\DocBlock</code>
    </UndefinedDocblockClass>
  </file>
  <file src="test/Reflection/TestAsset/TestSampleClass9.php">
    <MissingParamType occurrences="1">
      <code>$param1</code>
    </MissingParamType>
    <MissingPropertyType occurrences="2">
      <code>$_prop1</code>
      <code>$_prop2</code>
    </MissingPropertyType>
    <MissingReturnType occurrences="2">
      <code>getProp1</code>
      <code>getProp2</code>
    </MissingReturnType>
  </file>
  <file src="test/Reflection/TestAsset/TestTraitClass1.php">
    <UndefinedThisPropertyAssignment occurrences="1">
      <code>$this-&gt;other</code>
    </UndefinedThisPropertyAssignment>
  </file>
  <file src="test/Reflection/TestAsset/TestTraitClass2.php">
    <InvalidDocblockParamName occurrences="1">
      <code>$autoFetchingAllowed</code>
    </InvalidDocblockParamName>
    <InvalidReturnType occurrences="1">
      <code>Model_AbstractModel</code>
    </InvalidReturnType>
    <MissingParamType occurrences="1">
      <code>$dummy</code>
    </MissingParamType>
    <UndefinedDocblockClass occurrences="1">
      <code>Model_AbstractModel</code>
    </UndefinedDocblockClass>
  </file>
  <file src="test/Reflection/TestAsset/closures.php">
    <MissingClosureParamType occurrences="1">
      <code>$arg</code>
    </MissingClosureParamType>
    <MissingClosureReturnType occurrences="10">
      <code>function($arg) {</code>
      <code>function()</code>
      <code>function()</code>
      <code>function() use ($list1) { return 'function 8'; }</code>
      <code>function() { return $c = function() { return 'function7'; }; return $c(); }</code>
      <code>function() { return 'bar'; }</code>
      <code>function() { return 'function2'; }</code>
      <code>function() { return 'function5'; }</code>
      <code>function() { return 'function6'; }</code>
      <code>function() {}</code>
    </MissingClosureReturnType>
    <UnevaluatedCode occurrences="1">
      <code>return $c();</code>
    </UnevaluatedCode>
    <UnusedClosureParam occurrences="1">
      <code>$arg</code>
    </UnusedClosureParam>
    <UnusedVariable occurrences="3">
      <code>$c</code>
      <code>$closure</code>
      <code>$list1</code>
    </UnusedVariable>
  </file>
  <file src="test/Reflection/TestAsset/functions.php">
    <MissingClosureReturnType occurrences="2">
      <code>function() { return 'bar'; }</code>
      <code>function() { return 'function10'; }</code>
    </MissingClosureReturnType>
    <MissingParamType occurrences="1">
      <code>$arg</code>
    </MissingParamType>
    <MissingReturnType occurrences="10">
      <code>function1</code>
      <code>function10</code>
      <code>function11</code>
      <code>function12</code>
      <code>function4</code>
      <code>function5</code>
      <code>function6</code>
      <code>function7</code>
      <code>function8</code>
      <code>function9</code>
    </MissingReturnType>
    <UnusedParam occurrences="5">
      <code>$arg</code>
      <code>$one</code>
      <code>$one</code>
      <code>$two</code>
      <code>$two</code>
    </UnusedParam>
    <UnusedVariable occurrences="2">
      <code>$closure</code>
      <code>$foo</code>
    </UnusedVariable>
  </file>
  <file src="test/Scanner/DocBlockScannerTest.php">
    <InternalMethod occurrences="4">
      <code>new DocBlockScanner($docComment)</code>
      <code>new DocBlockScanner($docComment)</code>
      <code>new DocBlockScanner($docComment)</code>
      <code>new DocBlockScanner($docComment)</code>
    </InternalMethod>
    <MissingReturnType occurrences="3">
      <code>testDocBlockScannerDescriptions</code>
      <code>testDocBlockScannerParsesTagsWithNoValuesProperly</code>
      <code>testInvalidDocBlock</code>
    </MissingReturnType>
    <MixedArgument occurrences="2">
      <code>$tags[0]</code>
      <code>$tags[0]</code>
    </MixedArgument>
    <MixedArrayAccess occurrences="2">
      <code>$tags[0]['name']</code>
      <code>$tags[0]['value']</code>
    </MixedArrayAccess>
  </file>
  <file src="test/TestAsset/AbstractClass.php">
    <MissingPropertyType occurrences="1">
      <code>$config</code>
    </MissingPropertyType>
    <MissingReturnType occurrences="2">
      <code>getConfig</code>
      <code>helloWorld</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/BarClass.php">
    <InvalidParamDefault occurrences="1">
      <code>FooBarBaz\BazBarFoo</code>
    </InvalidParamDefault>
    <MissingFile occurrences="1">
      <code>include __DIR__ . '/foo/bar/baz.php'</code>
    </MissingFile>
    <MissingParamType occurrences="2">
      <code>$one</code>
      <code>$two</code>
    </MissingParamType>
    <MissingPropertyType occurrences="1">
      <code>$bar</code>
    </MissingPropertyType>
    <MissingReturnType occurrences="5">
      <code>five</code>
      <code>four</code>
      <code>one</code>
      <code>three</code>
      <code>two</code>
    </MissingReturnType>
    <UndefinedClass occurrences="1">
      <code>FooBarBaz\BazBarFoo</code>
    </UndefinedClass>
    <UnusedParam occurrences="1">
      <code>$a</code>
    </UnusedParam>
  </file>
  <file src="test/TestAsset/BarTrait.php">
    <MissingReturnType occurrences="1">
      <code>bar</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/BazClass.php">
    <MissingPropertyType occurrences="1">
      <code>$foo</code>
    </MissingPropertyType>
  </file>
  <file src="test/TestAsset/BazTrait.php">
    <MissingReturnType occurrences="1">
      <code>baz</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/ClassTypeHintedClass.php">
    <MissingReturnType occurrences="6">
      <code>classParameter</code>
      <code>closureParameter</code>
      <code>importedClosureParameter</code>
      <code>otherClassParameter</code>
      <code>parentParameter</code>
      <code>selfParameter</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/ClassWithByRefReturnMethod.php">
    <MissingReturnType occurrences="1">
      <code>byRefReturn</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/DocBlockOnlyHintsClass.php">
    <InvalidReturnType occurrences="9">
      <code>DocBlockOnlyHintsClass</code>
      <code>InternalHintsClass</code>
      <code>array</code>
      <code>bool</code>
      <code>callable</code>
      <code>float</code>
      <code>int</code>
      <code>self</code>
      <code>string</code>
    </InvalidReturnType>
  </file>
  <file src="test/TestAsset/FooClass.php">
    <MissingFile occurrences="1">
      <code>include __DIR__ . '/foo/bar/baz.php'</code>
    </MissingFile>
    <UndefinedClass occurrences="1">
      <code>E\Blarg</code>
    </UndefinedClass>
  </file>
  <file src="test/TestAsset/FooInterface.php">
    <MissingReturnType occurrences="1">
      <code>fooBarBaz</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/FooTrait.php">
    <MissingReturnType occurrences="2">
      <code>foo</code>
      <code>fooBarBaz</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/InternalHintsClass.php">
    <MissingReturnType occurrences="6">
      <code>arrayParameter</code>
      <code>boolParameter</code>
      <code>callableParameter</code>
      <code>floatParameter</code>
      <code>intParameter</code>
      <code>stringParameter</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/IterableHintsClass.php">
    <InvalidReturnType occurrences="2">
      <code>?iterable</code>
      <code>iterable</code>
    </InvalidReturnType>
    <MissingReturnType occurrences="3">
      <code>iterableParameter</code>
      <code>nullDefaultIterableParameter</code>
      <code>nullableIterableParameter</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/MultipleNamespaces.php">
    <MissingReturnType occurrences="1">
      <code>setGlobalStuff</code>
    </MissingReturnType>
    <UndefinedClass occurrences="4">
      <code>Bam</code>
      <code>Bar\Boo</code>
      <code>GlobalStuff</code>
      <code>SM\Blah</code>
    </UndefinedClass>
  </file>
  <file src="test/TestAsset/NonNamespaceClass.php">
    <MissingReturnType occurrences="1">
      <code>fooMethod</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/NullDefaultHintsClass.php">
    <MissingReturnType occurrences="8">
      <code>arrayParameter</code>
      <code>boolParameter</code>
      <code>callableParameter</code>
      <code>floatParameter</code>
      <code>intParameter</code>
      <code>nullDefaultHintsClassParameter</code>
      <code>selfParameter</code>
      <code>stringParameter</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/NullNullableDefaultHintsClass.php">
    <MissingReturnType occurrences="9">
      <code>arrayParameter</code>
      <code>boolParameter</code>
      <code>callableParameter</code>
      <code>floatParameter</code>
      <code>intParameter</code>
      <code>nullableDefaultHintsClassParameter</code>
      <code>parentParameter</code>
      <code>selfParameter</code>
      <code>stringParameter</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/NullableHintsClass.php">
    <MissingReturnType occurrences="9">
      <code>arrayParameter</code>
      <code>boolParameter</code>
      <code>callableParameter</code>
      <code>floatParameter</code>
      <code>intParameter</code>
      <code>nullableHintsClassParameter</code>
      <code>parentParameter</code>
      <code>selfParameter</code>
      <code>stringParameter</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/NullableReturnTypeHintedClass.php">
    <InvalidReturnType occurrences="10">
      <code>?InternalHintsClass</code>
      <code>?NullableReturnTypeHintedClass</code>
      <code>?array</code>
      <code>?bool</code>
      <code>?callable</code>
      <code>?float</code>
      <code>?int</code>
      <code>?parent</code>
      <code>?self</code>
      <code>?string</code>
    </InvalidReturnType>
  </file>
  <file src="test/TestAsset/ObjectHintsClass.php">
    <InvalidReturnType occurrences="2">
      <code>?object</code>
      <code>object</code>
    </InvalidReturnType>
    <MissingReturnType occurrences="3">
      <code>nullDefaultObjectParameter</code>
      <code>nullableObjectParameter</code>
      <code>objectParameter</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/ReturnTypeHintedClass.php">
    <InvalidReturnType occurrences="10">
      <code>InternalHintsClass</code>
      <code>ReturnTypeHintedClass</code>
      <code>array</code>
      <code>bool</code>
      <code>callable</code>
      <code>float</code>
      <code>int</code>
      <code>parent</code>
      <code>self</code>
      <code>string</code>
    </InvalidReturnType>
  </file>
  <file src="test/TestAsset/TestClassWithTraitAliases.php">
    <MissingReturnType occurrences="1">
      <code>bazFooBar</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/VariadicParametersClass.php">
    <MissingParamType occurrences="4">
      <code>$bar</code>
      <code>$bar</code>
      <code>$foo</code>
      <code>$foo</code>
    </MissingParamType>
    <MissingReturnType occurrences="5">
      <code>byRefTypeHintedVariadic</code>
      <code>byRefVariadic</code>
      <code>firstVariadicParameter</code>
      <code>secondVariadicParameter</code>
      <code>typeHintedVariadicParameter</code>
    </MissingReturnType>
  </file>
  <file src="test/TestAsset/functions.php">
    <MissingReturnType occurrences="2">
      <code>bar_foo</code>
      <code>foo_bar</code>
    </MissingReturnType>
  </file>
</files>
